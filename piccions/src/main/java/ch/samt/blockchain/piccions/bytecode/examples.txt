func func1() {
    print(42)
}

func func2() {
    print(24)
}

func main() {
    if (true) {
        func1()
    } else {
        func2()
    }
}

assembler.add(
    assembler.mainFunc(
        assembler.ifElseStatement(
            buildInstructions(
                PUSH_BOOL,
                FALSE
            ),
            assembler.invokeFunc("func1"),
            assembler.invokeFunc("func2")
        )
    )
);

assembler.add(
    assembler.declareFunc(
        "func1",
        PUSH_I8,
        (byte) 42,
        PRINT_I8
    )
);

assembler.add(
    assembler.declareFunc(
        "func2",
        PUSH_I8,
        (byte) 24,
        PRINT_I8
    )
);

--------------------------------

func main() {
    let var1 = 66;
    let var2 = 67;
    let var3 = 68;
    print(var3);
    print(var2);
    print(var1);
}

assembler.add(
    assembler.mainFunc(
        buildInstruction(PUSH_I8),
        assembler.variable("var1", (byte) 66),
        buildInstruction(PUSH_I8),
        assembler.variable("var2", (byte) 67),
        buildInstruction(PUSH_I8),
        assembler.variable("var3", (byte) 68),
        
        buildInstruction(LOAD),
        assembler.variable("var3"),
        buildInstruction(PRINT_I8),
        buildInstruction(LOAD),
        assembler.variable("var2"),
        buildInstruction(PRINT_I8),
        buildInstruction(LOAD),
        assembler.variable("var1"),
        buildInstruction(PRINT_I8)
    )
);


------------------------------------------------------

func main() {
    variable = 10

    while (variable / 10 == 1) {
        print(variable)
        variable = variable + 1
    }
}

assembler.add(
    assembler.mainFunc(
        buildInstructions(
            buildInstructions(
                buildInstruction(PUSH_I8),
                assembler.variable("variable", (byte) 10)
            ),
            assembler.whileLoop(
                buildInstructions(
                    buildInstruction(LOAD), // push var
                    assembler.variable("variable"),
                    buildInstruction(PUSH_I8),   // push 10
                    buildInstruction((byte) 10),
                    buildInstruction(DIV_I8),    // div
                    buildInstruction(PUSH_I8),   // push 1
                    buildInstruction((byte) 1),
                    buildInstruction(EQUALS_I8) // compare
                ),
                buildInstructions(
                    buildInstruction(LOAD), // push var
                    assembler.variable("variable"),
                    buildInstruction(PRINT_I8),
                    buildInstruction(LOAD), // push var
                    assembler.variable("variable"),
                    buildInstruction(PUSH_I8),
                    buildInstruction((byte) 1),
                    buildInstruction(ADD_I8),
                    buildInstruction(STORE), // write var
                    assembler.variable("variable")
                )
            )
        )
    )
);

---------------------------------------------------------------

func main() {
    let variable = 51;
    print_sum(variable, variable);
}

func print_sum(var1, var2) {
    print(var1, var2);
}

assembler.add(
    assembler.mainFunc(
        buildInstructions(
            buildInstructions(
                buildInstruction(PUSH_I8),
                assembler.variable("variable", (byte) 51)
            ),
            assembler.invokeFuncWithParams("print_sum", buildInstructions(
                buildInstruction(LOAD),
                assembler.variable("variable"),
                buildInstruction(LOAD),
                assembler.variable("variable")
            ))
        )
    )
);

assembler.add(
    assembler.declareFuncWithParams("print_sum", new int[]{1,1}, buildInstructions(
        buildInstruction(LOAD),
        assembler.param("print_sum", 0),
        buildInstruction(LOAD),
        assembler.param("print_sum", 1),
        buildInstruction(ADD_I8),
        buildInstruction(PRINT_I8)
    ))
);